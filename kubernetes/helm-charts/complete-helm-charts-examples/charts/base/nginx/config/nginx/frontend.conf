server_tokens off;
resolver 30.144.56.26 valid=300s; # For DNS lookup of IdP endpoints;
# map_hash_max_size 262144;
# map_hash_bucket_size 262144;

# This is for on-demand which will be implemented in the future
# include conf.d/extras/upstream.conf;

# When on-demand is implemented, this will need to be removed
upstream rbp_host {
  zone   backend 64k;
  server bpreimagine-react-ui-service:8080;
  keepalive 16;
}
upstream twofa_host {
  zone   backend 64k;
  server two-factor-auth-ui:8080;
  keepalive 16;
}
upstream abachatbot-host {
  zone   backend 64k;
  server abachatbot-react-ui-service:8080;
  keepalive 16;
}
upstream broker-onboarding-react-ui-service-host {
  zone   backend 64k;
  server broker-onboarding-react-ui-service:8080;
  keepalive 16;
}
upstream graphql-userprofile-service {
  zone   backend 64k;
  server graphql-userprofile-service:8080;
}
upstream graphql-applications-service {
  zone   backend 64k;
  server graphql-applications-service:8080;
}
upstream graphql-content-service {
  zone   backend 64k;
  server graphql-content-service:8080;
}
upstream graphql-logger-service {
  zone   backend 64k;
  server graphql-logger-service:8080;
}
upstream graphql-bob-service {
  zone   backend 64k;
  server graphql-bob-service:8080;
}
upstream graphql-useractivity-service {
  zone   backend 64k;
  server graphql-useractivity-service:8080;
}
upstream graphql-quotes-service {
  zone   backend 64k;
  server graphql-quotes-service:8080;
}
upstream graphql-renewals-service {
  zone   backend 64k;
  server graphql-renewals-service:8080;
}
upstream producer-tools-auth {
  zone   backend 64k;
  server producer-tools-auth-service:8080;
}
upstream broker-dashboard-service {
  zone   backend 64k;
  server broker-dashboard-service:8080;
}
upstream broker-notification-service {
  zone   backend 64k;
  server broker-notification-service:8080;
}
upstream graphql-commissions-service {
  zone   backend 64k;
  server graphql-commissions-service:8080;
}

# Custom log format to follow broker apps standard logging pattern
log_format main_jwt '$time_iso8601_date $time_iso8601_time.$millisec $time_iso8601_timezone $pid [NGINX-Thread] oidc_codexch_log INFO [nginx-server,$opentracing_context_x_b3_traceid,$opentracing_context_x_b3_spanid,false] Request=[clientIPAddress=$remote_addr, httpMethod=$request_method, endpointURI=$request_uri, queryString=$query_string, headerMap={$req_header}] ResponseCode=$status, ReqProcessTime=$request_time_ms, ResponseSize=$bytes_sent  ';

log_format rootSpanLogFormat '$time_iso8601_date $time_iso8601_time.$millisec $time_iso8601_timezone $pid [NGINX-Thread] rootSpanAccessLog INFO [nginx-server,$opentracing_context_x_b3_traceid,$opentracing_context_x_b3_traceid,false] Request=[clientIPAddress=$remote_addr, httpMethod=$request_method, endpointURI=$request_uri, queryString=$query_string, headerMap={$req_header}] ResponseCode=$status, ReqProcessTime=$request_time_ms, ResponseSize=$bytes_sent ';

log_format childSpanLogFormat '$time_iso8601_date $time_iso8601_time.$millisec $time_iso8601_timezone $pid [NGINX-Thread] childSpanAccessLog INFO [nginx-server,$opentracing_context_x_b3_traceid,$opentracing_context_x_b3_spanid,false] Request=[clientIPAddress=$remote_addr, httpMethod=$request_method, endpointURI=$request_uri, queryString=$query_string, headerMap={$req_header}] ResponseCode=$status, ReqProcessTime=$request_time_ms, ResponseSize=$bytes_sent ';


keyval_zone zone=opaque_sessions:128M state=sessions/opaque_sessions.json timeout=1h; # CHANGE timeout to JWT/exp validity period
keyval_zone zone=refresh_tokens:1M  state=sessions/refresh_tokens.json  timeout=8h; # CHANGE timeout to refresh validity period
keyval $cookie_auth_token $session_jwt zone=opaque_sessions;  # Exchange cookie for JWT
keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
keyval $request_id $new_session zone=opaque_sessions; # For initial session creation
keyval $request_id $new_refresh zone=refresh_tokens;  # "

map $refresh_token $no_refresh {
  "" 1;  # Before login
  "-" 1; # After logout
  default 0;
}

# In nginx open tracing implementation trace id and span id are not same for root span but spring boot applications captures trace id as span id for root span. To follow the same approach conditionally log the trace id as span id for root span. As per the specification if parent span id header is not available, it will be treated as root span.
map $http_x_b3_parentspanid $rootSpan {
  default 1;
  ~([[:alnum:]]) 0;
}

map $http_x_b3_parentspanid $childSpan {
  default 0;
  ~([[:alnum:]]) 1;
}


# By default nginx ISO8601 time format is not capturing the time at millisecond precision, extract the details separately and format it similar to other applications with  millisecond precision
map $time_iso8601 $time_iso8601_date {
  ~(\d+\-\d+\-\d+)T $1;
}
map $time_iso8601 $time_iso8601_time {
  ~T([^+]+) $1;
}
map $time_iso8601 $time_iso8601_timezone {
  ~((\+)(00:00)) GMT;
}
map $msec $millisec {
  ~\.([0-9]+)$ $1;
}

# By default request_time (response time) is captured in seconds with millisecond precision. Since all other services are capturing it in millisecond, use the below customization

# declare variable and assign default value
map $request_time $request_time_ms {
  default '';
}

# initialize math module
init_by_lua_block { math = require "math"}

# Convert second with decimals to millisec by multiplying it with 1000
log_by_lua_block {    ngx.var.request_time_ms = math.floor(tonumber(ngx.var.request_time) * 1000)  }

# JavaScript code for OpenID Connect
js_include conf.d/extras/openid_connect.js;
js_set $requestid_hash hashRequestId;

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

server {
  large_client_header_buffers 4 16k;
  error_page 404 https://www21.anthem.com/;
  error_page 500 502 503 504 https://www21.anthem.com/;
  status_zone status_page;
  location = /dashboard.html {
    opentracing_propagate_context;
    root   /usr/share/nginx/html;
    status_zone infra_dashboard_zone;
  }
  location /api {
    opentracing_propagate_context;
    index index.html index.htm index.php;
    api;
    status_zone nginx_api_zone;
  }
  listen              8080 ssl;
  keepalive_timeout   75s;
  keepalive_requests 100;

  ssl_certificate     /certs/tls.crt;
  ssl_certificate_key /certs/tls.key;
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers         HIGH:!aNULL:!MD5;

  include conf.d/extras/oidc_config.conf; # Authorization code flow and Relying Party processing
  include conf.d/extras/openid_connect_server.conf; # Authorization code flow and Relying Party processing

  # Do not ignore the headers with underscore
  underscores_in_headers  on;

  subrequest_output_buffer_size 32k; # To fit a complete tokenset response

  # Enable brotli compression
  brotli on;
  brotli_static on;
  brotli_types *;

  # Extract request header values using lua module for logging
  set $req_header "";
  header_filter_by_lua_block {
    ngx.var.req_header = ""

    -- Add JWT CLAIMS as part of request header logging

    if ngx.var.jwt_claim_userid then
      ngx.var.req_header = ngx.var.req_header .."unique_user_id=".. ngx.var.jwt_claim_userid ..", "
    end

    if ngx.var.jwt_claim_groups then
      ngx.var.req_header = ngx.var.req_header .."user_group="..ngx.var.jwt_claim_groups..", "
    end

    if ngx.var.jwt_claim_firstname  then
      ngx.var.req_header = ngx.var.req_header .."user_firstname="..ngx.var.jwt_claim_firstname..", "
    end

    if ngx.var.jwt_claim_lastname  then
      ngx.var.req_header = ngx.var.req_header .."user_lastname="..ngx.var.jwt_claim_lastname..", "
    end

    -- iterate request headers for logging
    local h = ngx.req.get_headers()
    for headerKey, headerValue in pairs(h) do
      -- cookie header contains multiple key value pairs so hadle it separately
      if headerKey ~= "cookie" then
        -- ngx.var.req_header = ngx.var.req_header ..name.."="..value.." "
        -- ngx.var.req_header = ngx.var.req_header ..headerKey.."="..headerValue.." "
        -- original
        -- ngx.var.req_header = ngx.var.req_header ..headerKey.."="..headerValue..", "
      end
      if headerKey == "cookie" then
        -- Extract key value pairs from cookie header
        for name, value in headerValue:gmatch"%s*([^=]*)=([^=]*)%f[%s%z]" do
          -- Skip cookie headers that is having large amount of data and not used for log analysis
          -- if name ~= "_4c_" or name ~= "SMSESSION"   then
          if name ~= "_4c_"  then
            ngx.var.req_header = ngx.var.req_header ..name.."="..value.." "
          end
        end
      end
    end
  }

  # Enable tracing for all requests.
  opentracing on;

  # Propagate the open tracing headers to child spans for tracing requests end to end.
  # opentracing_propagate_context;
  #opentracing_trace_locations off;

  # In nginx open tracing implementation trace id and span id are not same for root span but spring boot applications captures trace id as span id for root span. To follow the same approach conditionally log the trace id as span id for root span. As per the specification if parent span id header is not available, it will be treated as root span.
  access_log /var/log/nginx/access.log  rootSpanLogFormat  if=$rootSpan;
  access_log /var/log/nginx/access.log  childSpanLogFormat if=$childSpan;

  location = /apps/ptb/api/appStatusDescription/list {
    opentracing_propagate_context;
    proxy_pass "https://mproducer.anthem.com/medicare/cs/appStatusMapping?channel=agent";
    proxy_http_version 1.1;
    status_zone mproducer_zone;
  }

  location = / {
    opentracing_propagate_context;
    access_log off;
    default_type application/json;
    return 200 "{\"status\":\"UP\"}";
    status_zone infra_root_zone;
  }

  location = /health {
    opentracing_propagate_context;
    access_log off;
    default_type application/json;
    return 200 "{\"status\":\"UP\"}";
    status_zone infra_health_zone;
  }

  location = /apps/ptb/login {
    opentracing_propagate_context;
    proxy_pass http://twofa_host;
    proxy_http_version 1.1;
    status_zone tfa_zone;
  }

  location = /apps/ptb/api/lastlogin {
    opentracing_propagate_context;
    proxy_pass http://twofa_host;
    proxy_http_version 1.1;
    status_zone tfa_zone;
  }

  location /apps/ptb/api/gql/sm {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://graphql-content-service;
  }
  location /apps/ptb/api/gql/profile/v1 {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://graphql-userprofile-service;
  }
  location /apps/ptb/api/gql/messages/v1 {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://graphql-content-service;
  }
  location /apps/ptb/api/gql/applications/v1 {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://graphql-applications-service;
  }
  location /apps/ptb/api/gql/commissions/v1 {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://graphql-commissions-service;
  }
  location /apps/ptb/api/gql/logger/v1 {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://graphql-logger-service;
  }
  location /apps/ptb/api/gql/activityfeed/v1 {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    status_zone gql_zone;
    proxy_pass http://broker-notification-service;
  }

  location /apps/ptb/public/api/authenticate {
    opentracing_propagate_context;
    proxy_pass http://producer-tools-auth;
    status_zone gql_zone;
  }

  location /apps/ptb/public/api/marketplace {
    opentracing_propagate_context;
    proxy_pass http://graphql-content-service;
    status_zone gql_zone;
  }

  location /apps/ptb/api/gql/user/activity {
    opentracing_propagate_context;
    proxy_pass http://graphql-useractivity-service;
    status_zone gql_zone;
  }

  location /apps/ptb/api/gql/quotes {
    opentracing_propagate_context;
    proxy_pass http://graphql-quotes-service;
    status_zone gql_zone;
  }

  location /apps/ptb/api/gql/renewals {
    opentracing_propagate_context;
    proxy_pass http://graphql-renewals-service;
    status_zone gql_zone;
  }

  location /apps/ptb/api/gql/bob {
    opentracing_propagate_context;
    proxy_pass http://graphql-bob-service;
    status_zone gql_zone;
  }

  location /apps/ptb/api/gql/dashboard {
    opentracing_propagate_context;
    proxy_pass http://broker-dashboard-service;
    status_zone gql_zone;
  }

  location /apps/ptb/auth/aba {
    opentracing_propagate_context;
    proxy_pass http://abachatbot-host;
    proxy_http_version 1.1;
    status_zone aba_zone;
  }

  location /apps/ptb/aba {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    proxy_pass http://abachatbot-host;
    proxy_http_version 1.1;
    status_zone aba_zone;
  }

  location /apps/ptb/auth {
    opentracing_propagate_context;
    proxy_pass http://twofa_host;
    proxy_http_version 1.1;
    status_zone tfa_zone;
  }

  location /apps/ptb/public {
    opentracing_propagate_context;
    proxy_read_timeout 300s;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_connect_timeout 75s;
    proxy_pass http://rbp_host;
    proxy_http_version 1.1;
    status_zone rbp_public_zone;
  }

  location /apps/ptb/pat {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    proxy_read_timeout 300s;
    proxy_connect_timeout 75s;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    proxy_pass http://broker-onboarding-react-ui-service-host;
    proxy_http_version 1.1;
    status_zone pat_zone;
  }

  location /apps/ptb/pat/api {
    include conf.d/extras/openid_auth.conf;
    opentracing_propagate_context;
    client_max_body_size 15m;
    proxy_http_version 1.1;
    proxy_pass http://broker-onboarding-react-ui-service-host;
    status_zone pat_zone;
  }

  location /apps/ptb/api/renewals/upsell {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    proxy_read_timeout 300s;
    proxy_connect_timeout 75s;
    proxy_buffering off;
    proxy_http_version 1.1;
    client_max_body_size 15m;
    proxy_pass http://rbp_host;
    status_zone rbp_zone;
  }

  location /apps/ptb/ {
    opentracing_propagate_context;
    include conf.d/extras/openid_auth.conf;
    proxy_read_timeout 300s;
    proxy_connect_timeout 75s;
    proxy_buffering off;
    proxy_pass http://rbp_host;
    proxy_http_version 1.1;
    status_zone rbp_zone;
  }

}
###
