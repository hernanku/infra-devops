{{- define "library-kafka.dc.tpl" -}}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ include "library-kafka.util.resolve" (dict "key" "minReplicas" "context" $) | default 2 }}
  selector:
    app: {{ .Release.Name }}
    deploymentconfig: {{ .Release.Name }}
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        deploymentconfig: {{ .Release.Name }}
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: {{ include "library-kafka.util.resolve" (dict "key" "javaOptions" "context" $) | default "CHANGE_ME" }}
        - name: SPRING_CLOUD_CONFIG_URI
          value: {{ include "library-kafka.util.resolve" (dict "key" "configServer" "context" $) | default "CHANGE_ME" }}
        - name: SPRING_PROFILES_ACTIVE
          value: {{ include "library-kafka.util.resolve" (dict "key" "activeProfiles" "context" $) | default "CHANGE_ME" }}
        - name: HEALTH_CONFIG_TIMETOLIVE
          value: {{ include "library-kafka.util.resolve" (dict "key" "healthConfigTimeToLive" "context" $) | default "1800000"  | quote }}
        - name: KEYSTORE_FILE
          value: {{ include "library-kafka.util.resolve" (dict "key" "keystoreFile" "context" $) | default "/app/certs/keystore.jks" }}
        - name: KEYSTORE_PASSWORD
          value: {{ include "library-kafka.util.resolve" (dict "key" "keystorePassword" "context" $) | default "" | quote }}
        - name: KEY_PASSWORD
          value: {{ include "library-kafka.util.resolve" (dict "key" "keyPassword" "context" $) | default ""  | quote }}
        - name: KEY_ALIAS
          value: {{ include "library-kafka.util.resolve" (dict "key" "keyAlias" "context" $) | default "" | quote }}
        image: {{ .Values.registryHost }}/{{ .Values.registryOrg }}/{{ .Release.Name }}:{{ include "library-kafka.util.resolve" (dict "key" "imageVersion" "context" $) | default "latest" }}
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: {{ include "library-kafka.util.resolve" (dict "key" "healthEndpoint" "context" $) | default "/health" }}
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ include "library-kafka.util.resolve" (dict "key" "probeInitialDelaySeconds" "context" $) | default 90 }}
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: {{ include "library-kafka.util.resolve" (dict "key" "probeTimeoutSeconds" "context" $) | default 5 }}
        name: {{ .Release.Name }}
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: {{ include "library-kafka.util.resolve" (dict "key" "healthEndpoint" "context" $) | default "/health" }}
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ include "library-kafka.util.resolve" (dict "key" "probeInitialDelaySeconds" "context" $) | default 90 }}
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: {{ include "library-kafka.util.resolve" (dict "key" "probeTimeoutSeconds" "context" $) | default 5 }}
        resources:
          limits:
            cpu: {{ include "library-kafka.util.resolve" (dict "key" "resourceLimitsCpu" "context" $) | default "250m" | quote }}
            memory: {{ include "library-kafka.util.resolve" (dict "key" "resourceLimitsMemory" "context" $) | default "768Mi" | quote }}
          requests:
            cpu: {{ include "library-kafka.util.resolve" (dict "key" "resourceRequestsCpu" "context" $) | default "100m" | quote }}
            memory: {{ include "library-kafka.util.resolve" (dict "key" "resourceRequestsMemory" "context" $) | default "512Mi" | quote }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/truststore
          name: volume-truststore
          readOnly: true
        - mountPath: /app/certs
          name: volume-keystore
          readOnly: true
        - mountPath: /app/logs
          name: app-logs
        - mountPath: /app/audit
          name: audit-logs
        - mountPath: /apps/certs/kafka_config/
          name: volume-kafkaconfig
      - env:
        - name: APPLICATION_NAME
          value: {{ .Release.Name }}
        - name: DATA_CENTER
          value: {{ .Values.dataCenter }}
        - name: REGION
          value: {{ .Values.region }}
        - name: ENVIRONMENT
          value: {{ .Values.environment }}
        image: {{ .Values.registryHost }}/{{ .Values.registryOrg }}/broker-rsyslog-client:latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /usr/bin/pgrep
            - rsyslogd
          failureThreshold: 10
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: {{ .Release.Name }}-logging-sidecar
        readinessProbe:
          exec:
            command:
            - /usr/bin/pgrep
            - rsyslogd
          failureThreshold: 10
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: {{ include "library-kafka.util.resolve" (dict "key" "syslogClientResourceLimitsCpu" "context" $) | default "10m" | quote }}
            memory: {{ include "library-kafka.util.resolve" (dict "key" "syslogClientResourceLimitsMemory" "context" $) | default "32Mi" | quote }}
          requests:
            cpu: {{ include "library-kafka.util.resolve" (dict "key" "syslogClientResourceRequestsCpu" "context" $) | default "5m" | quote }}
            memory: {{ include "library-kafka.util.resolve" (dict "key" "syslogClientResourceRequestsMemory" "context" $) | default "16Mi" | quote }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/logs
          name: app-logs
        - mountPath: /app/audit
          name: audit-logs
        - mountPath: /app/config
          name: volume-rsyslog-config
      dnsConfig:
        searches:
        - wellpoint.com
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: {{ .Values.imagePullSecretName }}
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: app-logs
      - emptyDir: {}
        name: audit-logs
      - configMap:
          defaultMode: 420
          name: rsyslog-client
        name: volume-rsyslog-config
      - name: volume-truststore
        secret:
          defaultMode: 420
          secretName: brokertruststore
          # ---- read secret name from hierarchy
      - name: volume-keystore
        secret:
          defaultMode: 420
          secretName: {{ include "library-kafka.util.resolve" (dict "key" "keystoreSecretName" "context" $) | default "empty-secret" | quote }}
          # ---- read secret name from hierarchy
      - configMap:
          defaultMode: 420
          name: kafkaconfig
        name: volume-kafkaconfig
  triggers:
    - type: ConfigChange
{{- end -}}
{{- define "library-kafka.dc" -}}
{{- include "library-kafka.util.merge" (append . "library-kafka.dc.tpl") -}}
{{- end -}}
