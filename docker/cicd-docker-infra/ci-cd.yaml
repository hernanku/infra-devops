version: '3.9'
services:
  # ngrok: 
  #   image: wernight/ngrok
  #   container_name: ngrok-jenkins
  #   command: ngrok http http://192.168.1.141:8081
  #   # port for ngrok ui
  #   ports:
  #     - 4040:4040
  #   environment: 
  #     NGROK_AUTH: 1QLHjKxOEARPFzRgZSsAbAmuo45_5EZUh1F4DCv8tP27NzoB9
  #     NGROK_DEBUG: "true"
  jenkins:
      image: jenkins/jenkins:2.277.4-lts
      networks: 
        - cicd-network
      mem_limit: 1000m
      mem_reservation: 128M
      cpus: 0.5
      privileged: true
      user: root
      restart: unless-stopped
      ports:
        - target: 8080
          published: 8080
          protocol: tcp
          mode: host
      container_name: jenkins
      volumes:
        - /Users/admin/docker-data/jenkins:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        - JAVA_OPTS=-Xms512m -Xmx2g -Djava.awt.headless=true


  sonarqube:
      image: sonarqube:8-community
      networks: 
        - cicd-network
      container_name: sonarqube
      # mem_limit: 2000m
      # mem_reservation: 128M
      # cpus: 0.5
      # depends_on:
      #   - sonarqube-db
      # links:
      #   - sonarqube-db
      # environment:
      #   SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      #   SONAR_JDBC_USERNAME: sonar
      #   SONAR_JDBC_PASSWORD: sonar
      volumes:
        - /Users/admin/docker-data/sonarqube/data:/opt/sonarqube/data
        - /Users/admin/docker-data/sonarqube/extensions:/opt/sonarqube/extensions
        - /Users/admin/docker-data/sonarqube/logs:/opt/sonarqube/logs
        - /Users/admin/docker-data/sonarqube/temp:/opt/sonarqube/temp
      ports:
        - "8082:9000"
      restart: always

  # sonarqube-db:
  #   image: postgres:12
  #   container_name: sonarqube-db
  #   networks: 
  #     - cicd-network
  #   environment:
  #     POSTGRES_PASSWORD: sonar
  #     SONARQUBE_DB_USER: sonar
  #     SONARQUBE_DB_PASSWORD: sonar
  #     SONARQUBE_DB: sonar
  #   volumes:
  #     - /Users/admin/docker-data/sonarqube/db-data:/var/lib/postgresql

  # artifactory-db:
  #   image: postgres:12
  #   container_name: artifactory-db
  #   networks: 
  #     - cicd-network
  #   environment:
  #     POSTGRES_PASSWORD: artifactory
  #     ARTIFACTORY_DB_USER: artifactory
  #     ARTIFACTORY_DB_PASSWORD: artifactory
  #     ARTIFACTORY_DB: artifactory
    # volumes:
    #   - /Users/admin/docker-data/artifactory/db-data:/var/lib/postgresql

  # Artifactory service
  artifactory:
    image: docker.bintray.io/jfrog/artifactory-oss:6.23.13
    container_name: artifactory
    # mem_limit: 2000M
    # mem_reservation: 512M
    # cpus: 0.5
    networks: 
      - cicd-network
    ports:
     - 8083:8081
    volumes:
     - /Users/admin/docker-data/artifactory:/var/opt/jfrog/artifactory
#    Add extra Java options by uncommenting the following lines
#    environment:
#     - EXTRA_JAVA_OPTIONS=-Xms512m -Xmx4g
    restart: always
    ulimits:
      nproc: 65535
      nofile:
        soft: 32000
        hard: 40000


  # # nginx server
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - '8080:80'
  #     #- '8443:443'
  #   volumes: 
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - /home/amin/Documents/dev-projects/infra-devops/nginx/apps-configs:/etc/nginx/conf.d/apps-configs
  #     - /home/amin/Documents/dev-projects/auth/certs/ci-cd:/etc/nginx/conf.d/ssl
  #   restart: always
  #   networks: 
  #     - cicd-network
  #   extra_hosts:
  #     # - "host.docker.internal:172.17.0.1"
  #     - "host.docker.internal:host-gateway"

  #   environment:

# container networking
networks:
  cicd-network: 
    name: cicd-network


